// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/redis/redis.go

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisService is a mock of RedisService interface.
type MockRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisServiceMockRecorder
}

// MockRedisServiceMockRecorder is the mock recorder for MockRedisService.
type MockRedisServiceMockRecorder struct {
	mock *MockRedisService
}

// NewMockRedisService creates a new mock instance.
func NewMockRedisService(ctrl *gomock.Controller) *MockRedisService {
	mock := &MockRedisService{ctrl: ctrl}
	mock.recorder = &MockRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisService) EXPECT() *MockRedisServiceMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockRedisService) GetCache(ctx context.Context, key string, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", ctx, key, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCache indicates an expected call of GetCache.
func (mr *MockRedisServiceMockRecorder) GetCache(ctx, key, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockRedisService)(nil).GetCache), ctx, key, result)
}

// SetCacheWithExpiration mocks base method.
func (m *MockRedisService) SetCacheWithExpiration(ctx context.Context, key string, value interface{}, duration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCacheWithExpiration", ctx, key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCacheWithExpiration indicates an expected call of SetCacheWithExpiration.
func (mr *MockRedisServiceMockRecorder) SetCacheWithExpiration(ctx, key, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheWithExpiration", reflect.TypeOf((*MockRedisService)(nil).SetCacheWithExpiration), ctx, key, value, duration)
}

// SetCacheWithoutExpiration mocks base method.
func (m *MockRedisService) SetCacheWithoutExpiration(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCacheWithoutExpiration", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCacheWithoutExpiration indicates an expected call of SetCacheWithoutExpiration.
func (mr *MockRedisServiceMockRecorder) SetCacheWithoutExpiration(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheWithoutExpiration", reflect.TypeOf((*MockRedisService)(nil).SetCacheWithoutExpiration), ctx, key, value)
}
